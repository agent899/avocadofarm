# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of @puxxalwl x @Lipton4ka1 doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: –ê–≤–∞–∫–∞–¥–æ –±–æ—Ç
# Author: @Lipton4ka1 x @puxxalwl
# Commands:
# .main | .mainoff
# ---------------------------------------------------------------------------------

version = (0, 0, 2)

# for more info: https://murix.ru/files/ftg
# by xadjilut, 2021

# _           _            _ _
# | |         | |          (_) |
# | |     _ | |_ _  _ _| |
# | |    / _ \| / _ \/ | | |/ /
# | |_| (_) | || (_) \ \ |   <
# \_/\_/ \\_/|_/_|_|\_\
#
#              ¬© Copyright 2022
#
#         developed by @puxxalwl x @Lipton4ka1

# meta developer: @puxxalwl x @Lipton4ka1
# meta banner: https://te.legra.ph/file/a428776824470e0bdccb6.jpg
# meta pic: https://te.legra.ph/file/98192f1f7953275baead5.jpg

import random
from datetime import timedelta

from telethon import functions
from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class AvocadoMod(loader.Module):
    """–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞—Ä–º–∏–Ω–≥–∞ –≥–µ–º–æ–≤ –≤ –∞–≤–∞–∫–∞–¥–æ–±–æ—Ç–µ ( .main –í–†–ï–ú–ï–ù–ù–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢!!! –ü–ò–®–ò–¢–ï .dlmod https://raw.githubusercontent.com/agent899/avocadofarm/main/farmem –¥–∞–ª—å—à–µ –ø–æ–π–º–µ—Ç–µ"""

    strings = {
        "name": "–ê–≤–∞–∫–∞–¥–æ",
        "main": (
            "<i>‚úÖC–æ–∑–¥–∞—Ç–µ–ª–∏ –±–µ–≥—É—Ç –∫ –≤–∞–º –Ω–∞ –ø–æ–º–æ—â—å, –≤—Å—ë –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 20"
            " —Å–µ–∫—É–Ω–¥...</i>"
        ),
        "main_already": "<i>–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ</i>",
        "mainoff": "<i>‚ùå–ê–≤—Ç–æ-–º–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\nüíé –ù–∞–º–∞–π–Ω–µ–Ω–æ:</i> <b>%coins% i¬¢</b>",
        "main": "<i>üíé –ù–∞–º–∞–π–Ω–µ–Ω–æ:</i> <b>%coins% i¬¢</b>",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.myid = (await client.get_me()).id
        self.avacado = 6333102398

    async def maincmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–º–∞–π–Ω"""
        status = self.db.get(self.name, "status", False)
        if status:
            return await message.edit(self.strings["main_already"])
        self.db.set(self.name, "status", True)
        await self.client.send_message(
            self.iris, "–ú–∞–π–Ω", schedule=timedelta(seconds=20)
        )
        await message.edit(self.strings["main"])

    async def mainoffcmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-–º–∞–π–Ω"""
        self.db.set(self.name, "status", False)
        coins = self.db.get(self.name, "coins", 0)
        if coins:
            self.db.set(self.name, "coins", 0)
        await message.edit(self.strings["mainoff"].replace("%coins%", str(coins)))

    async def maincmd(self, message):
        """–í—ã–≤–æ–¥ –∫–æ–ª-–≤–∞ –∫–æ–∏–Ω–æ–≤, –¥–æ–±—ã—Ç—ã—Ö —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º"""
        coins = self.db.get(self.name, "coins", 0)
        await message.edit(self.strings["main"].replace("%coins%", str(coins)))


    async def maincmd(self, message):
        """–í—ã–≤–æ–¥ –∫–æ–ª-–≤–∞ –∫–æ–∏–Ω–æ–≤, –¥–æ–±—ã—Ç—ã—Ö —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º"""
        coins = self.db.get(self.name, "coins", 0)
        await message.edit(self.strings["main"].replace("%coins%", str(coins)))

    async def watcher(self, event):
        if not isinstance(event, Message):
            return
        chat = utils.get_chat_id(event)
        if chat != self.iris:
            return
        status = self.db.get(self.name, "status", False)
        if not status:
            return
        if event.raw_text == "–ú–∞–π–Ω":
            return await self.client.send_message(
                self.iris, "–ú–∞–π–Ω", schedule=timedelta(minutes=random.randint(1, 20))
            )
        if event.sender_id != self.iris:
            return
        if "–ù–ï–ó–ê–ß–Å–¢!" in event.raw_text:
            args = [int(x) for x in event.raw_text.split() if x.isnumeric()]
            randelta = random.randint(20, 60)
            if len(args) == 4:
                delta = timedelta(
                    hours=args[1], minutes=args[2], seconds=args[3] + randelta
                )
            elif len(args) == 3:
                delta = timedelta(minutes=args[1], seconds=args[2] + randelta)
            elif len(args) == 2:
                delta = timedelta(seconds=args[1] + randelta)
            else:
                return
            sch = (
                await self.client(
                    functions.messages.GetScheduledHistoryRequest(self.iris, 1488)
                )
            ).messages
            await self.client(
                functions.messages.DeleteScheduledMessagesRequest(
                    self.iris, id=[x.id for x in sch]
                )
            )
            return await self.client.send_message(self.iris, "–ú–∞–π–Ω", schedule=delta)
        if "–ó–ê–ß–Å–¢" in event.raw_text or "–£–î–ê–ß–ê" in event.raw_text:
            args = event.raw_text.split()
            for x in args:
                if x[0] == "+":
                    return self.db.set(
                        self.name,
                        "coins",
                        self.db.get(self.name, "coins", 0) + int(x[1:]),
                    )

    async def message_q(
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(user_id) as conv:
            msg = await conv.send_message(text)
            response = await conv.get_response()
            if mark_read:
                await conv.mark_read()

            if delete:
                await msg.delete()
                await response.delete()

            return response



    @loader.command()
    async def bagcmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ –≥–µ–º—ã"""

        bot = "@bio_attacker_bot"
        bags = await self.message_q(
            "–ö–æ–∏–Ω—ã",
            bot,
            delete=True,
        )

        args = utils.get_args_raw(message)

        if not args:
            await utils.answer(message, bags.text)

    async def irishcmd(self, message):
        """–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é –ê–≤–∞–∫–∞–¥–æ"""
        ihelp = (
            "üçÄ| <b>‚úÖ–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n .main - –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ –º–∞–π–Ω.\n .mainoff\n .bag - –±–∏–æ–º–µ—à üî´ "
        )
        await utils.answer(message, ihelp)